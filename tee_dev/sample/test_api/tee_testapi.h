#ifndef _TEE_TESTAPI_H_
#define _TEE_TESTAPI_H_

#include "testapi_cmd.h"


#define	MAX_NAME_LEN	128

#define	MAX_GROUP_NUM	16

#define	MAX_MODULE_NUM	32

#define	MAX_CASE_NUM	8




typedef int TEST_Result;

enum {
	TEST_RESULT_PASS = 0,
	TEST_RESULT_FAIL,
	TEST_RESULT_MEMOUT,		//memory out, such as malloc fail for test.
	TEST_RESULT_HANG,		//test block forever.
	TEST_RESULT_UNSUPPORT,
	TEST_RESULT_CANT,		//test can't continue, such as initial fail.
	TEST_RESULT_MAX
};

enum {

	TEST_TEE_CORE_ALLOC_PROPERTY,
	TEST_TEE_CORE_START_PROPERTY,
	TEST_TEE_CORE_RESET_PROPERTY,
	TEST_TEE_CORE_FREE_PROPERTY,
	TEST_TEE_CORE_GET_PROPERTY_NAME,
	TEST_TEE_CORE_GET_NEXT_PROPERTY,
	TEST_TEE_CORE_GET_PROPERTY_AS_BOOL,
	TEST_TEE_CORE_GET_PROPERTY_AS_STRING,
	TEST_TEE_CORE_GET_PROPERTY_AS_UUID,
	TEST_TEE_CORE_GET_PROPERTY_AS_U32,
	TEST_TEE_CORE_GET_PROPERTY_AS_ID,
	TEST_TEE_CORE_GET_PROPERTY_AS_BINBLOCK,

};
enum {

	TEST_TEE_INTERNAL_GET_SYSTIME,
	TEST_TEE_INTERNAL_GET_REETIME,
	TEST_TEE_INTERNAL_GET_PERSIST_TIME,
	TEST_TEE_INTERNAL_SET_PERSIST_TIME,
	TEST_TEE_INTERNAL_TIME_WAIT,
};
enum {

	TEST_TEE_CORE_CANCEL_GETFLAG,
	TEST_TEE_CORE_CANCEL_MASK,
	TEST_TEE_CORE_CANCEL_UNMASK,
	TEST_TEE_CORE_CANCEL_MAX,
};
enum {
	TEST_TEE_CORE_MEM_ALLOC,
	TEST_TEE_CORE_MEM_REALLOC,
	TEST_TEE_CORE_MEM_FREE,
	TEST_TEE_CORE_MEM_FILL,
	TEST_TEE_CORE_MEM_CMP,
	TEST_TEE_CORE_MEM_MOVE,
	TEST_TEE_CORE_MEM_ACCESS_CHECK,
	TEST_TEE_CORE_MEM_MAX,
};
enum {
	TEST_TEE_CORE_CRYPTO_PKCS1_V1_5_MD5,
	TEST_TEE_CORE_CRYPTO_PKCS1_V1_5_SHA1,
	TEST_TEE_CORE_CRYPTO_PKCS1_V1_5_SHA256,
	TEST_TEE_CORE_CRYTO_MAX,
};
enum {
	TEST_TEE_CORE_OPENSESSION,
	TEST_TEE_CORE_CLOSESESSION,
	TEST_TEE_CORE_INVOKECMD,
	TEST_TEE_CORE_CLIENT_MAX
};
enum {
	TEST_TEE_CACHE_FLUSH,
	TEST_TEE_CACHE_INVALID,
	TEST_TEE_CACHE_CLEAN,

	TEST_TEE_CACHE_MAX
};
enum {
	TEST_TEEC_INIT_CONTEXT,
	TEST_TEEC_FINIT_CONTEXT,
	TEST_TEEC_ALLOC_SHM,
	TEST_TEEC_RELEASE_SHM,
	TEST_TEEC_OPEN_SESSION,
	TEST_TEEC_CLOSE_SESSION,
	TEST_TEEC_INVOKECOMMAND,
	TEST_TEEC_REQUESTCANCELLATION,
	TEST_TEEC_GETERROR,
	TEST_TEEC_REGISTERTA,
	TEST_TEEC_CLIENT_MAX
};

enum {
	TEST_GROUP_CLIENT,
	TEST_GROUP_CORE_MEM,
	TEST_GROUP_CORE_CACHE,
	TEST_GROUP_CORE_CLIENT,
	TEST_GROUP_CORE_CANCEL,
	TEST_GROUP_INTERNAL_TIME,
	TEST_GROUP_CORE_CRYPTO,
	TEST_GROUP_CORE_PROPERTY,
	TEST_GROUP_MAX
};

struct CASES_Cfg {
	char	name[MAX_NAME_LEN];
	int	result;
};
struct MODULE_Cfg {
	char 	name[MAX_NAME_LEN];
	int	enable;
	int	times;
	int	type;
	struct CASES_Cfg cases[MAX_CASE_NUM];
};



struct GROUP_Cfg {

	char	name[MAX_NAME_LEN];
	int	type;
	int	enable;
	struct MODULE_Cfg module_cfg[MAX_MODULE_NUM];
};





#endif /* _TEE_TEST_H_ */
